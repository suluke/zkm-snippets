const fs              = require('fs');
const Prism           = require('prismjs');
const commandLineArgs = require('command-line-args');
const optionDefinitions = [
  { name: 'language', alias: 'l', type: String },
  { name: 'file', alias: 'f', type: String, defaultOption: true },
  { name: 'output', alias: 'o', type: String },
  { name: 'numbers', alias: 'n', type: Boolean },
];
const prismInfo = require('./prism');
const languagAliasResolver = Object.keys(prismInfo.languages).reduce((acc, name) => {
  acc[name] = name;
  const aliases = prismInfo.languages[name].aliasTitles || {};
  Object.keys(aliases).forEach((alias) => { acc[alias] = name; });
  return acc;
}, {});
const options = commandLineArgs(optionDefinitions);

function getLanguage(name) {
  const lang = languagAliasResolver[name];
  if (!lang) {
    return null;
  }
  if (Prism.languages[lang]) {
    return Prism.languages[lang];
  }
  try {
    const required = prismInfo.languages[lang].require;
    if (required && getLanguage(required) === null) {
      return null;
    }
    require('prismjs/components/prism-' + lang);
    return Prism.languages[lang];
  } catch(e) {
    return null;
  }
}

// FIXME this is a workaround for a problem currently appearing in prism
// from nodejs. 'tokens' can be of type UInt8Array, which needs to be
// .toString()ed before `.replace` can be called on it.
Prism.util.encode = function (tokens) {
  const Token = Prism.Token;
  if (tokens instanceof Token) {
    return new Token(tokens.type, Prism.util.encode(tokens.content), tokens.alias);
  } else if (Prism.util.type(tokens) === 'Array') {
    return Array.prototype.map.call(tokens, Prism.util.encode);
  } else {
    const str = tokens.toString();
    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
  }
}

fs.readFile(options.file, (err, code) => {
  if (err) {
    console.error(err);
    process.exit(1);
    return;
  }
  const language = getLanguage(options.language);
  if (language === null) {
    console.error('Unknown language "' + options.language + '"');
    process.exit(2);
    return;
  }
  const html = Prism.highlight(code, language);

  if (!options.output) {
    console.log(html);
  } else {
    fs.writeFile(options.output, html, (err) => {
      if (err) {
        console.error(err);
        process.exit(3);
      }
    });
  }
});