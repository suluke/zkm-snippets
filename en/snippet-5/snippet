auto rect = imgData.faces[std::uniform_int_distribution<size_t>(0u, imgData.faces.size()-1u)(random)];

auto rectTl = glm::vec2(rect.tl().x, rect.tl().y);
auto rectBr = glm::vec2(rect.br().x, rect.br().y);
glm::vec2 face1 = glm::vec2(webcamImageTransform.getInverseTransform() * glm::vec3(rectTl / glm::vec2(imageProvider.width(), imageProvider.height()), 1.f));
glm::vec2 face2 = glm::vec2(webcamImageTransform.getInverseTransform() * glm::vec3(rectBr / glm::vec2(imageProvider.width(), imageProvider.height()), 1.f));

glm::vec2 faceMin = glm::min(face1, face2);
glm::vec2 faceMax = glm::max(face1, face2);

glm::vec2 targetSize = glm::vec2(std::uniform_real_distribution<float>(.1f, .2f)(random),
                                  std::uniform_real_distribution<float>(.1f, .2f)(random));
glm::vec2 targetCenter = sampleCircle(random) * glm::vec2(.4f) + glm::vec2(.5f);
glm::vec2 targetMin = targetCenter - targetSize / 2.f;
glm::vec2 targetMax = targetCenter + targetSize / 2.f;

faceBlitter.blit(webcamFramebuffer.getTexture(), faceMin, faceMax, targetMin, targetMax, backgroundFramebuffer.getTexture());
